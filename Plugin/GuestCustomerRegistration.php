<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\TrojanRequestBlocker\Plugin;

use MagedIn\TrojanRequestBlocker\Service\Validator\FakeUserRegistration;
use Magento\Checkout\Api\GuestPaymentInformationManagementInterface;
use Magento\Quote\Api\Data\PaymentInterface;
use Magento\Quote\Api\Data\AddressInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Store\Model\StoreManagerInterface;

/**
 * Plugin to validate guest customer registration during checkout
 */
class GuestCustomerRegistration
{
    /**
     * @var FakeUserRegistration
     */
    private FakeUserRegistration $validator;

    /**
     * @var StoreManagerInterface
     */
    private StoreManagerInterface $storeManager;

    /**
     * @param FakeUserRegistration $validator
     * @param StoreManagerInterface $storeManager
     */
    public function __construct(
        FakeUserRegistration $validator,
        StoreManagerInterface $storeManager
    ) {
        $this->validator = $validator;
        $this->storeManager = $storeManager;
    }

    /**
     * Before plugin for savePaymentInformationAndPlaceOrder method
     *
     * @param GuestPaymentInformationManagementInterface $subject
     * @param string $cartId
     * @param string $email
     * @param PaymentInterface $paymentMethod
     * @param AddressInterface|null $billingAddress
     * @return array
     * @throws LocalizedException
     */
    public function beforeSavePaymentInformationAndPlaceOrder(
        GuestPaymentInformationManagementInterface $subject,
        $cartId,
        $email,
        PaymentInterface $paymentMethod,
        AddressInterface $billingAddress = null
    ): array {
        $store = $this->storeManager->getStore();
        
        if ($billingAddress) {
            $this->validator->validate(
                $email,
                $billingAddress->getFirstname(),
                $billingAddress->getLastname(),
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $store->getId()
            );
        }

        return [$cartId, $email, $paymentMethod, $billingAddress];
    }

    /**
     * Before plugin for savePaymentInformation method
     *
     * @param GuestPaymentInformationManagementInterface $subject
     * @param string $cartId
     * @param string $email
     * @param PaymentInterface $paymentMethod
     * @param AddressInterface|null $billingAddress
     * @return array
     * @throws LocalizedException
     */
    public function beforeSavePaymentInformation(
        GuestPaymentInformationManagementInterface $subject,
        $cartId,
        $email,
        PaymentInterface $paymentMethod,
        AddressInterface $billingAddress = null
    ): array {
        $store = $this->storeManager->getStore();
        
        if ($billingAddress) {
            $this->validator->validate(
                $email,
                $billingAddress->getFirstname(),
                $billingAddress->getLastname(),
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $store->getId()
            );
        }

        return [$cartId, $email, $paymentMethod, $billingAddress];
    }
}
