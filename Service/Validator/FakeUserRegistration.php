<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\TrojanRequestBlocker\Service\Validator;

use MagedIn\TrojanRequestBlocker\Model\Config;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Phrase;

/**
 * Validator for fake user registration
 */
class FakeUserRegistration
{
    /**
     * @var Config
     */
    private Config $config;

    /**
     * @param Config $config
     */
    public function __construct(
        Config $config
    ) {
        $this->config = $config;
    }

    /**
     * Validate customer registration data
     *
     * @param string $email
     * @param string $firstName
     * @param string $lastName
     * @param string $scopeType
     * @param null $scopeCode
     * @return bool
     * @throws LocalizedException
     */
    public function validate(
        string $email,
        string $firstName,
        string $lastName,
        string $scopeType = ScopeConfigInterface::SCOPE_TYPE_DEFAULT,
        $scopeCode = null
    ): bool {
        if (!$this->config->isFakeUserRestrictionEnabled($scopeType, $scopeCode)) {
            return true;
        }

        // Check email domain and specific email addresses
        if ($this->isEmailBlocked($email, $scopeType, $scopeCode)) {
            throw new LocalizedException(new Phrase($this->config->getFakeUserRestrictionErrorMessage($scopeType, $scopeCode)));
        }

        // Check first name patterns
        if ($this->isNameBlocked($firstName, $this->config->getBlockedFirstNamePatterns($scopeType, $scopeCode))) {
            throw new LocalizedException(new Phrase($this->config->getFakeUserRestrictionErrorMessage($scopeType, $scopeCode)));
        }

        // Check last name patterns
        if ($this->isNameBlocked($lastName, $this->config->getBlockedLastNamePatterns($scopeType, $scopeCode))) {
            throw new LocalizedException(new Phrase($this->config->getFakeUserRestrictionErrorMessage($scopeType, $scopeCode)));
        }

        return true;
    }

    /**
     * Check if email is blocked (domain or specific address)
     *
     * @param string $email
     * @param string $scopeType
     * @param null $scopeCode
     * @return bool
     */
    private function isEmailBlocked(
        string $email,
        string $scopeType = ScopeConfigInterface::SCOPE_TYPE_DEFAULT,
        $scopeCode = null
    ): bool {
        $email = strtolower(trim($email));
        
        // First check if the specific email address is blocked
        $blockedAddresses = $this->config->getBlockedEmailAddresses($scopeType, $scopeCode);
        if (in_array($email, $blockedAddresses)) {
            return true;
        }
        
        // Then check if the email domain is blocked
        $emailParts = explode('@', $email);
        
        if (count($emailParts) !== 2) {
            return false;
        }

        $domain = $emailParts[1];
        $blockedDomains = $this->config->getBlockedEmailDomains($scopeType, $scopeCode);

        foreach ($blockedDomains as $blockedDomain) {
            if ($domain === $blockedDomain || str_ends_with($domain, '.' . $blockedDomain)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if name contains blocked patterns
     *
     * @param string $name
     * @param array $blockedPatterns
     * @return bool
     */
    private function isNameBlocked(string $name, array $blockedPatterns): bool
    {
        $name = strtolower(trim($name));
        
        if (empty($name)) {
            return false;
        }

        foreach ($blockedPatterns as $pattern) {
            if (str_contains($name, $pattern)) {
                return true;
            }
        }

        return false;
    }
}
